<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mingshashan.mybatis.learn.dao.mapper.CustomerMapper">

    <!--
    cache- 配置本定命名空间的缓存。
        type- cache实现类，默认为PERPETUAL，可以使用自定义的cache实现类（别名或完整类名皆可）
        eviction- 回收算法，默认为LRU，可选的算法有：
            LRU– 最近最少使用的：移除最长时间不被使用的对象。
            FIFO– 先进先出：按对象进入缓存的顺序来移除它们。
            SOFT– 软引用：移除基于垃圾回收器状态和软引用规则的对象。
            WEAK– 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
        flushInterval- 刷新间隔，默认为1个小时，单位毫秒
        size- 缓存大小，默认大小1024，单位为引用数
        readOnly- 只读
    -->
    <cache type="com.mingshashan.mybatis.learn.mybatis.CustomCache"
           size="2048" flushInterval="60000">
        <property name="cacheFile" value="./cache.tmp"/>
    </cache>

    <!--
    cache-ref–从其他命名空间引用缓存配置。
        如果你不想定义自己的cache，可以使用cache-ref引用别的cache。因为每个cache都以namespace为id，所以cache-ref只需要配置一个namespace属性就可以了。需要注意的是，如果cache-ref和cache都配置了，以cache为准。
    -->
    <!-- <cache-ref namespace="com.someone.application.data.SomeMapper"/> -->


    <resultMap id="CustomerMap" type="com.mingshashan.mybatis.learn.entity.CustomerEntity">
        <id property="id" column="id"></id>
        <result property="name" column="name"></result>
        <result property="gender" column="gender"></result>
        <result property="phone" column="phone"></result>
        <result property="addressList" column="address_info"
                typeHandler="com.mingshashan.mybatis.learn.mybatis.handler.AddressInfoHandler"
                javaType="java.util.List"
                jdbcType="VARCHAR"
        ></result>
        <result property="gmtCreated" column="gmt_created"></result>
        <result property="gmtModified" column="gmt_modified"></result>
        <result property="isValid" column="is_valid"></result>
        <collection property="tagEntityList" ofType="TagEntity">
            <id property="id" column="id"/>
            <result property="name" column="name"/>
        </collection>
    </resultMap>


    <sql id="customer_column">
        id, name, gender, phone, address_info, gmt_created, gmt_modified
    </sql>

    <insert id="saveCustomer" parameterType="CustomerEntity">
        INSERT INTO T_ARG_CUSTOMER(
        <include refid="customer_column"></include>
        )
        values(#{id}, #{name}, #{gender}, #{phone}, #{addressList}, #{gmtCreated}, #{gmtModified})
    </insert>

    <update id="updateCustomer" parameterType="CustomerEntity">
        update T_ARG_CUSTOMER set
        name = #{name},
        gender = #{gender},
        phone = #{phone},
        address_info = #{addressList},
        gmt_modified = #{gmtModified}
        from t_arg_customer
        <where>
            ID = #{id}
        </where>
    </update>
    <update id="deleteCustomerById">
        update T_ARG_CUSTOMER set is_valid = '0'
        <where>
            id = #{id}
        </where>
    </update>

    <select id="findById" resultType="CustomerEntity">
        select
        <include refid="customer_column"></include>
        from T_ARG_CUSTOMER
        <where>
            id = #{id}
        </where>
    </select>


</mapper>