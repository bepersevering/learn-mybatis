<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!-- 定义属性值 -->
    <properties>
        <property name="username" value="root"/>
        <property name="id" value="development"/>
    </properties>

    <!-- 全局配置信息 -->
    <!-- 一个配置完整的 settings 元素的示例如下：-->
    <settings>
        <!-- 全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。-->
        <setting name="cacheEnabled" value="true"/>
        <!-- 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。。-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!-- 开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 lazyLoadTriggerMethods)。（在 3.4.1 及之前的版本中默认为 true） -->
        <setting name="aggressiveLazyLoading" value="false"/>
        <!-- 是否允许单个语句返回多结果集（需要数据库驱动支持）。 -->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!-- 使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。 -->
        <setting name="useColumnLabel" value="true"/>
        <!-- 允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。 -->
        <setting name="useGeneratedKeys" value="false"/>
        <!-- 指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。 -->
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <!-- 指定发现自动映射目标未知列（或未知属性类型）的行为。
            NONE: 不做任何反应
            WARNING: 输出警告日志（'org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN）
            FAILING: 映射失败 (抛出 SqlSessionException) -->
        <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>
        <!-- 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。 -->
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <!-- 设置超时时间，它决定数据库驱动等待数据库响应的秒数。 -->
        <setting name="defaultStatementTimeout" value="60"/>
        <!-- 为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。 -->
        <setting name="defaultFetchSize" value="100"/>
        <!-- 指定语句默认的滚动策略。
         FORWARD_ONLY | SCROLL_SENSITIVE | SCROLL_INSENSITIVE | DEFAULT（等同于未设置）-->
        <setting name="defaultResultSetType" value="DEFAULT"/>
        <!-- 是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。 -->
        <setting name="safeRowBoundsEnabled" value="false"/>
        <!-- 是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。 -->
        <setting name="safeResultHandlerEnabled" value="true"/>
        <!-- 是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。 -->
        <setting name="mapUnderscoreToCamelCase" value="false"/>
        <!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。
            若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。 -->
        <setting name="localCacheScope" value="SESSION"/>
        <!-- 当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。 -->
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <!-- 指定对象的哪些方法触发一次延迟加载。 -->
        <!--        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>-->
        <setting name="lazyLoadTriggerMethods" value=""/>
        <!-- 指定动态 SQL 生成使用的默认脚本语言。 -->
        <setting name="defaultScriptingLanguage" value="org.apache.ibatis.scripting.xmltags.XMLLanguageDriver"/>
        <!-- 指定 Enum 使用的默认 TypeHandler 。 -->
        <setting name="defaultEnumTypeHandler" value="org.apache.ibatis.type.EnumTypeHandler"/>
        <!-- 指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。 -->
        <setting name="callSettersOnNulls" value="false"/>
        <!-- 当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。 -->
        <setting name="returnInstanceForEmptyRow" value="false"/>
        <!-- 指定 MyBatis 增加到日志名称的前缀。 -->
        <setting name="logPrefix" value="learn_mybatis_log_"/>
        <!-- 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。 -->
        <!--        <setting name="logImpl"-->
        <!--                 value="SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING"/>-->

        <!-- 指定 Mybatis 创建可延迟加载对象所用到的代理工具。 CGLIB | JAVASSIST-->
        <setting name="proxyFactory" value="JAVASSIST"/>
        <!-- 指定 VFS 的实现 -->
        <!-- <setting name="vfsImpl" value="org.mybatis.example.YourselfVfsImpl"/> -->
        <!-- 允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1） -->
        <setting name="useActualParamName" value="true"/>
        <!-- 指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为static Configuration getConfiguration() 的方法。（新增于 3.2.3） -->
        <!-- <setting name="configurationFactory" value="org.mybatis.example.ConfigurationFactory"/> -->
        <!-- 从SQL中删除多余的空格字符。请注意，这也会影响SQL中的文字字符串。 -->
        <setting name="shrinkWhitespacesInSql" value="true"/>

        <!-- 指定一个拥有 provider 方法的 sql provider 类 （新增于 3.5.6）. 这个类适用于指定 sql provider 注解上的type（或 value） 属性（当这些属性在注解中被忽略时）。 (e.g. @SelectProvider) -->
        <!-- <setting name="defaultSqlProviderType" value="true"/> -->

        <!-- 为 'foreach' 标签的 'nullable' 属性指定默认值。 -->
        <setting name="nullableOnForEach" value="false"/>

        <!-- 当应用构造器自动映射时，参数名称被用来搜索要映射的列，而不再依赖列的顺序。-->
        <setting name="argNameBasedConstructorAutoMapping" value="false"/>
    </settings>


    <typeAliases>
        <!-- 配置别名信息 -->
        <typeAlias alias="CustomerEntity" type="com.mingshashan.mybatis.learn.entity.CustomerEntity"/>
        <typeAlias alias="OrderEntity" type="com.mingshashan.mybatis.learn.entity.OrderEntity"/>
        <typeAlias alias="OrderItemEntity" type="com.mingshashan.mybatis.learn.entity.OrderItemEntity"/>
        <typeAlias alias="ProductEntity" type="com.mingshashan.mybatis.learn.entity.ProductEntity"/>
        <typeAlias alias="TagEntity" type="com.mingshashan.mybatis.learn.entity.TagEntity"/>
        <typeAlias alias="CustomCache" type="com.mingshashan.mybatis.learn.mybatis.CustomCache"/>
    </typeAliases>

    <typeHandlers>
        <typeHandler handler="com.mingshashan.mybatis.learn.mybatis.handler.AddressInfoHandler"/>
    </typeHandlers>

    <!-- 每次 MyBatis 创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成实例化工作。
        默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认无参构造方法，
        要么通过存在的参数映射来调用带有参数的构造方法。 如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现。 -->
    <objectFactory type="com.mingshashan.mybatis.learn.mybatis.CustomObjectFactory"/>

    <!-- MyBatis 提供在构造对象的时候，对于指定的对象进行特殊的加工，其配置方式如下 -->
    <objectWrapperFactory type="com.mingshashan.mybatis.learn.mybatis.CustomMapWrapperFactory"/>

    <reflectorFactory type="com.mingshashan.mybatis.learn.mybatis.CustomReflectorFactory"/>

    <plugins>
        <plugin interceptor="com.mingshashan.mybatis.learn.plugins.LimitPlugin">
            <property name="limit.size" value="1000"/>
        </plugin>
    </plugins>

    <environments default="dev">
        <environment id="dev">
            <!-- 配置事务管理器的类型 -->
            <transactionManager type="JDBC"/>
            <!-- 配置数据源的类型，以及数据库连接的相关信息 -->
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://192.168.75.138:3306/dev?useSSL=false"/>
                <property name="username" value="root"/>
                <property name="password" value="000000"/>
            </dataSource>
        </environment>
        <environment id="TEST">
            <!-- 配置事务管理器的类型 -->
            <transactionManager type="JDBC"/>
            <!-- 配置数据源的类型，以及数据库连接的相关信息 -->
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://192.168.254.201:3306/order?useSSL=false"/>
                <property name="username" value="root"/>
                <property name="password" value="000000"/>
            </dataSource>
        </environment>
        <environment id="sit">
            <!-- 配置事务管理器的类型 -->
            <transactionManager type="JDBC"/>
            <!-- 如果environment id为test则使用JNDI -->
            <dataSource type="JNDI">
                <property name="data_source" value="jdbc/mybatis-jndi"/>
                <property name="initial_context" value="java:/comp/env"/>
            </dataSource>
        </environment>
    </environments>


    <databaseIdProvider type="DB_VENDOR">
        <property name="SQL Server" value="sqlserver"/>
        <property name="DB2" value="db2"/>
        <property name="Oracle" value="oracle"/>
        <property name="Mysql" value="mysql"/>
    </databaseIdProvider>

    <!-- 配置映射配置文件的位置 -->
    <mappers>
        <mapper resource="mapper/CustomerMapper.xml"/>
        <mapper resource="mapper/OrderItemMapper.xml"/>
        <mapper resource="mapper/OrderMapper.xml"/>
        <mapper resource="mapper/ProductMapper.xml"/>
        <mapper resource="mapper/TagMapper.xml"/>
    </mappers>


</configuration>